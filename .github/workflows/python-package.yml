# Enhanced CI/CD Pipeline for CropSmart Flask Application
# Includes testing, linting, security scanning, and deployment preparation

name: CropSmart CI/CD Pipeline

on:
  push:
    branches: [ "master", "main", "develop" ]
  pull_request:
    branches: [ "master", "main" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  # Code Quality and Security Checks
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 black isort bandit safety pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Code formatting check with Black
      run: |
        black --check --diff .
        
    - name: Import sorting check with isort
      run: |
        isort --check-only --diff .
        
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security check with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
        
    - name: Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Testing across multiple Python versions
  test:
    runs-on: ubuntu-latest
    needs: quality-checks
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11"]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create test directories
      run: |
        mkdir -p tests
        mkdir -p models
        mkdir -p uploads
        
    - name: Run tests with coverage
      run: |
        if [ -d "tests" ] && [ "$(ls -A tests)" ]; then
          pytest tests/ --cov=. --cov-report=xml --cov-report=html --cov-report=term
        else
          echo "No tests found, running basic import test"
          python -c "import app; print('App imports successfully')"
        fi
        
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      if: matrix.python-version == '3.10'
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  # Build and Package
  build:
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create application package
      run: |
        mkdir -p dist
        tar -czf dist/cropsmart-app.tar.gz \
          --exclude='.git' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='.pytest_cache' \
          --exclude='htmlcov' \
          --exclude='dist' \
          .
          
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: cropsmart-build
        path: dist/
        retention-days: 30

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [quality-checks, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/cropintel
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test Docker image
      run: |
        # Build and run container for testing
        docker build -t cropsmart-test .
        docker run -d --name cropsmart-test-container -p 5000:5000 cropsmart-test
        
        # Wait for container to start
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Test main endpoint
        curl -f http://localhost:5000/ || exit 1
        
        # Cleanup
        docker stop cropsmart-test-container
        docker rm cropsmart-test-container
        
    - name: Push Docker image
      if: github.event_name != 'pull_request'
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: production
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Docker Deployment to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        
        # Pull the latest image
        docker pull ${{ secrets.DOCKER_USERNAME }}/cropintel:develop
        
        # Stop existing container if running
        docker stop cropsmart-staging || true
        docker rm cropsmart-staging || true
        
        # Run new container
        docker run -d \
          --name cropsmart-staging \
          --restart unless-stopped \
          -p 5001:5000 \
          -e FLASK_ENV=staging \
          -v $(pwd)/models:/app/models \
          -v $(pwd)/uploads:/app/uploads \
          ${{ secrets.DOCKER_USERNAME }}/cropintel:develop
        
        # Wait for container to be ready
        sleep 30
        
        # Health check
        curl -f http://localhost:5001/health || exit 1
        
        echo "âœ… Staging deployment successful!"
        
  # Docker Deployment to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, docker-build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        
        # Pull the latest image
        docker pull ${{ secrets.DOCKER_USERNAME }}/cropintel:latest
        
        # Blue-green deployment strategy
        # Stop old container gracefully
        if docker ps | grep -q cropsmart-production; then
          echo "Stopping existing production container..."
          docker stop cropsmart-production
          docker rename cropsmart-production cropsmart-production-backup
        fi
        
        # Run new container
        docker run -d \
          --name cropsmart-production \
          --restart unless-stopped \
          -p 5000:5000 \
          -e FLASK_ENV=production \
          -v $(pwd)/models:/app/models \
          -v $(pwd)/uploads:/app/uploads \
          ${{ secrets.DOCKER_USERNAME }}/cropintel:latest
        
        # Wait for container to be ready
        sleep 30
        
        # Health check
        curl -f http://localhost:5000/health || exit 1
        
        # Remove backup container if deployment successful
        docker rm cropsmart-production-backup || true
        
        echo "âœ… Production deployment successful!"
        
        # Optional: Send notification
        echo "ðŸ“¢ Production deployment completed at $(date)"
